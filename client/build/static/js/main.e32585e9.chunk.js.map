{"version":3,"sources":["helpers/fetch2.js","reducers/authReducer.js","components/Auth.js","reducers/todoReducer.js","components/Todo.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetch2","api","body","a","fetch","method","headers","localStorage","getItem","JSON","stringify","response","json","fetch3","type","signupUser","createAsyncThunk","signinUser","authReducer","createSlice","name","initialState","token","loading","error","reducers","addToken","state","action","logout","removeItem","extraReducers","fulfilled","payload","message","pending","setItem","actions","Auth","useState","email","setEmail","password","setPassword","auth","setAuth","useSelector","user","dispatch","useDispatch","className","value","onChange","e","target","id","onClick","createTodo","getTodo","deleteTodo","todoReducer","push","filter","item","_id","Todo","mytodo","setTodo","todos","useEffect","placeholder","todo","map","App","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e32585e9.chunk.js","sourcesContent":["\r\nexport const fetch2 = async (api, body)=>{\r\n    const response = await fetch(api,{\r\n            method:'post',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('token')\r\n            },\r\n            body:JSON.stringify(body)\r\n        })\r\n    return await response.json(); \r\n}\r\nexport const fetch3 = async (api,type)=>{\r\n    const response = await fetch(api,{\r\n            method:type,\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('token')\r\n            }\r\n        })\r\n    return await response.json(); \r\n}","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {fetch2} from '../helpers/fetch2';\r\nconst initialState = {\r\n    token:\"\",\r\n    loading:false,\r\n    error:\"\"\r\n}\r\n\r\nexport const signupUser = createAsyncThunk(\r\n    'signupUser',\r\n    async (body)=>{\r\n        const response = await fetch2('/signup', body);\r\n        return response\r\n    }\r\n)\r\nexport const signinUser = createAsyncThunk(\r\n    'signinUser',\r\n    async (body)=>{\r\n        const response = await fetch2('/signin', body);\r\n        return response\r\n    }\r\n)\r\n\r\nconst authReducer = createSlice({\r\n    name:\"user\",\r\n    initialState,\r\n    reducers:{\r\n        addToken: (state, action)=>{\r\n            state.token = localStorage.getItem('token');\r\n        },\r\n        logout: (state, action)=>{\r\n            state.token = null;\r\n            localStorage.removeItem('token');\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [signupUser.fulfilled]:(state, {payload:{error,message}})=>{\r\n            state.loading = false;\r\n            if(error){\r\n                state.error = error;\r\n            }\r\n            else{\r\n                state.error = message;        \r\n            }\r\n        },\r\n        [signupUser.pending]:(state, action)=>{\r\n            state.loading = true;\r\n        },\r\n        [signinUser.fulfilled]:(state, {payload:{error,token}})=>{\r\n            state.loading = false;\r\n            if(error){\r\n                state.error = error;\r\n            }\r\n            else{\r\n                state.token = token; \r\n                state.error = 'Login Success! Welcome Back';\r\n                localStorage.setItem('token', token);      \r\n            }\r\n        },\r\n        [signinUser.pending]:(state, action)=>{\r\n            state.loading = true;\r\n        }\r\n    }\r\n})\r\n\r\nexport const {addToken, logout} = authReducer.actions;\r\nexport default authReducer.reducer;","import {useState} from 'react'\r\nimport {signupUser, signinUser} from '../reducers/authReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nfunction Auth() {\r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState();\r\n    const [auth, setAuth] = useState('signIn');\r\n    const {loading, error} = useSelector(state=>state.user);\r\n    const dispatch = useDispatch();\r\n    // authenticate\r\n    const authenticate = ()=>{\r\n        if(auth === 'signIn'){\r\n            dispatch(signinUser({email,password})); \r\n        }else{\r\n           dispatch(signupUser({email,password})); \r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                loading &&\r\n                <div className=\"progress purple accent-3\">\r\n                    <div className=\"indeterminate\"></div>\r\n                </div>\r\n            }\r\n            <h1>Please {auth}! </h1>\r\n            {\r\n                error &&\r\n                <h5>{error}</h5>\r\n            }\r\n            <input type=\"email\" name=\"email\" value={email} onChange={(e)=>setEmail(e.target.value)} id=\"email\" />\r\n            <input type=\"password\" name=\"password\" value={password} onChange={(e)=>setPassword(e.target.value)} id=\"password\" />\r\n            {\r\n                auth === 'signIn'?\r\n                <h6 onClick={()=>setAuth('signUp')}>Dont have an account?</h6>:\r\n                <h6 onClick={()=>setAuth('signIn')}>Already Have an account?</h6>\r\n            }\r\n            <button className=\"btn purple accent-3\" onClick={()=>authenticate()}>{auth}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n","import { createAsyncThunk, createSlice, isFulfilled } from \"@reduxjs/toolkit\";\r\nimport {fetch2, fetch3} from '../helpers/fetch2';\r\nconst initialState = [];\r\n\r\nexport const createTodo = createAsyncThunk(\r\n    'createtodo',\r\n    async (body)=>{\r\n        const response = await fetch2('/createtodo', body);\r\n        return response;\r\n    }\r\n)\r\nexport const getTodo = createAsyncThunk(\r\n    'gettodo',\r\n    async ()=>{\r\n        const response = await fetch3('/gettodos', 'get');\r\n        return response;\r\n    }\r\n)\r\nexport const deleteTodo = createAsyncThunk(\r\n    'deletetodo',\r\n    async (id)=>{\r\n        const response = await fetch3(`/remove/${id}`, 'delete');\r\n        return response;\r\n    }\r\n)\r\nconst todoReducer = createSlice({\r\n    name:'todo',\r\n    initialState,\r\n    reducers:{},\r\n    extraReducers:{\r\n        [createTodo.fulfilled]:(state,{payload:{message}})=>{\r\n            if(message) state.push(message);\r\n        },\r\n        [getTodo.fulfilled]:(state,{payload:{message}})=>{\r\n            return message\r\n        },\r\n        [deleteTodo.fulfilled]:(state,{payload:{message}})=>{\r\n            return state.filter(item=>item._id !== message._id)\r\n        }\r\n    }\r\n});\r\n\r\nexport default todoReducer.reducer;","import {useState, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {createTodo, deleteTodo, getTodo} from '../reducers/todoReducer';\r\nimport {logout} from '../reducers/authReducer';\r\nfunction Todo() {\r\n    const dispatch = useDispatch();\r\n    const [mytodo, setTodo] = useState('');\r\n    const todos = useSelector(state => state.todos);\r\n    useEffect(() => {\r\n        dispatch(getTodo());\r\n    }, [])\r\n    const addTodo = ()=>{\r\n        dispatch(createTodo({todo:mytodo}));\r\n        setTodo('');\r\n    }\r\n    const delTodo = (id)=>{\r\n        dispatch(deleteTodo(id))\r\n    }\r\n    const userlogout = ()=>{\r\n        dispatch(logout());\r\n    }\r\n    return (\r\n        <div>\r\n            <button className=\"btn purple accent-3\" onClick={()=>userlogout()}>Logout</button>\r\n\r\n            <input type=\"text\" value={mytodo} onChange={(e)=>setTodo(e.target.value)} name=\"\" id=\"\" placeholder=\"What's in your TO-DO list?\" />\r\n            <button className=\"btn purple accent-3\" onClick={()=>addTodo()} >Create To-Do</button>\r\n            <br/>\r\n            <ul className=\"collection\">\r\n            {\r\n                todos.map(item => {\r\n                    return <li onClick={()=>{delTodo(item._id)}} className=\"collection-item\" key={item._id}>{item.todo}</li>\r\n                })\r\n            }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import {useEffect} from 'react';\nimport './App.css';\nimport Auth from './components/Auth';\nimport Todo from './components/Todo';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {addToken} from './reducers/authReducer';\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(()=>{\n    dispatch(addToken());\n  }, [])\n  const {token} = useSelector(state => state.user);\n  return (\n    <div className=\"App\">\n      {\n        (token)? <Todo />: <Auth />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from '../reducers/authReducer';\nimport todoReducer from '../reducers/todoReducer';\nexport const store = configureStore({\n  reducer: {\n    user:authReducer,\n    todos:todoReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}